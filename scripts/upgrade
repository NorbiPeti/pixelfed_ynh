#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_composer__2
source ynh_supervisor
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=db_pwd)
app_key=$(ynh_app_setting_get --app=$app --key=app_key)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app="$app" --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app="$app" --key=is_public --value=0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name="$app")
	ynh_app_setting_set --app="$app" --key=db_name --value="$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app="$app" --key=final_path --value="$final_path"
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE UPGRADE COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring upgrade compatibility..."

# If app_key doesn't exist, retrieve it
if [ -z "$app_key" ]; then
	ynh_script_progression --message="Retrieving app_key..."
	app_key=$(grep -oP "APP_KEY=\Kbase64.*" "$final_path/.env")
	ynh_app_setting_set --app="$app" --key=app_key --value="$app_key"
fi

if dpkg --compare-versions "0.9.0~ynh3" gt "$(ynh_read_manifest --manifest="/etc/yunohost/apps/$YNH_APP_INSTANCE_NAME/manifest.json" --manifest_key="version" || echo 1.0)" ; then
	ynh_script_progression --message="Ensuring upgrade compatibility to 0.9.0~ynh3..."
	
	ynh_script_progression --message="Configuring a systemd service..."
	ynh_add_systemd_config --service="${app}-horizon" --template=horizon.conf
fi

if dpkg --compare-versions "0.10.9~ynh2" gt "$(ynh_read_manifest --manifest="/etc/yunohost/apps/$YNH_APP_INSTANCE_NAME/manifest.json" --manifest_key="version" || echo 1.0)" ; then
	ynh_script_progression --message="Ensuring upgrade compatibility to 0.10.9~ynh2..."
	
	ynh_script_progression --message="Stopping and removing the systemd service..."
	ynh_remove_systemd_config --service="${app}-horizon"
	
	ynh_script_progression --message="Installing dependencies..."
	ynh_install_app_dependencies "$pkg_dependencies"
	
	ynh_script_progression --message="Creating log file..."
	mkdir -p "/var/log/$app/"
	touch "/var/log/$app/${app}-horizon.log"
	chown -R root: "/var/log/$app/"


	ynh_script_progression --message="Configuring a supervisor service..."
	phpversion=$YNH_PHP_VERSION
	ynh_add_supervisor_config --service="${app}-horizon" --template=horizon.conf --others_var="phpversion"
	
	ynh_script_progression --message="Starting a supervisor service..."
	ynh_supervisor_action --service_name="${app}-horizon" --action="start" --log_path="/var/log/$app/${app}-horizon.log"
fi

if dpkg --compare-versions "0.10.9~ynh3" gt "$(ynh_read_manifest --manifest="/etc/yunohost/apps/$YNH_APP_INSTANCE_NAME/manifest.json" --manifest_key="version" || echo 1.0)" ; then
	ynh_script_progression --message="Ensuring upgrade compatibility to 0.10.9~ynh3..."
	
	if ynh_exec_warn_less yunohost service status ${app}-horizon >/dev/null
	then
		ynh_script_progression --message="Removing ${app}-horizon service..."
		yunohost service remove "${app}-horizon"
	fi
	
	ynh_script_progression --message="Integrating service in YunoHost..."
	yunohost service add "supervisor" --description "Supervisor daemon for $app" --log "/var/log/$app/${app}-horizon.log"
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SUPERVISOR SERVICE
#=================================================
ynh_script_progression --message="Stopping a supervisor service..."

ynh_supervisor_action --service_name="${app}-horizon" --action="stop" --log_path="/var/log/$app/${app}-horizon.log"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..."

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE PHP DEPENDENCIES
#=================================================
ynh_script_progression --message="Updating php dependencies..."

chown -R "$app": "$final_path"

ynh_composer_exec --phpversion="$phpversion" --workdir="$final_path" --commands="update"

#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_script_progression --message="Modifying a config file..."

config="$final_path/.env"
ynh_backup_if_checksum_is_different --file="$config"
cp ../conf/.env "$config"

ynh_replace_string --match_string="__APP__"     --replace_string="$app"      --target_file="$config"
ynh_replace_string --match_string="__APP_KEY__" --replace_string="$app_key"  --target_file="$config"
ynh_replace_string --match_string="__DOMAIN__"  --replace_string="$domain"   --target_file="$config"
ynh_replace_string --match_string="__PATH__"    --replace_string="$path_url" --target_file="$config"
ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name"  --target_file="$config"
ynh_replace_string --match_string="__DB_USER__" --replace_string="$db_user"  --target_file="$config"
ynh_replace_string --match_string="__DB_PWD__"  --replace_string="$db_pwd"   --target_file="$config"

# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$config"

#=================================================
# DEPLOYMENT
#=================================================
ynh_script_progression --message="Deploying..."

pushd "$final_path"
	php$phpversion artisan horizon:install
	php$phpversion artisan config:clear
	php$phpversion artisan config:cache
	php$phpversion artisan route:clear
	php$phpversion artisan route:cache
	php$phpversion artisan view:clear
	php$phpversion artisan view:cache
	php$phpversion artisan storage:link
	php$phpversion artisan migrate --force
	php$phpversion artisan update
	php$phpversion artisan horizon:purge
	php$phpversion artisan horizon:assets
popd

#=================================================
# CREATE LOG FILE
#=================================================
ynh_script_progression --message="Creating log file..."

mkdir -p "/var/log/$app/"
touch "/var/log/$app/${app}-horizon.log"
chown -R root: "/var/log/$app/"

#=================================================
# UPGRADE THE CRON FILE
#=================================================
ynh_script_progression --message="Upgrading cron file..."

cp ../conf/cron "/etc/cron.d/$app"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="/etc/cron.d/$app"
ynh_replace_string --match_string="__PHPVERSION__" --replace_string="$phpversion" --target_file="/etc/cron.d/$app"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --time --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SUPERVISOR
#=================================================
ynh_script_progression --message="Upgrading supervisor configuration..."

# Create a dedicated supervisor config
ynh_add_supervisor_config --service="${app}-horizon" --template=horizon.conf --others_var="phpversion"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# START SUPERVISOR SERVICE
#=================================================
ynh_script_progression --message="Starting a supervisor service..."

ynh_supervisor_action --service_name="${app}-horizon" --action="start" --log_path="/var/log/$app/${app}-horizon.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
